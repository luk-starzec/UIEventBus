@inject ComponentEventBus bus
@inject ICatalogService service
@implements IDisposable

<div class="catalog__wrapper">

    <h3>Catalog</h3>

    @if (items is null)
    {
        <div>Loading...</div>
    }
    else
    {
        <button class="catalog__add-button" @onclick="Add" title="Add product">
            <span class="oi oi-plus"></span>
        </button>

        <div class="catalog__table-wrapper">

            <table class="catalog__table">

                <thead>
                    <CatalogHeaderRow />
                </thead>

                <tbody>
                    @foreach (var item in items)
                    {
                        <CatalogRow Item="@item" />
                    }
                </tbody>

            </table>

        </div>
    }

</div>

@code {
    List<CatalogModel> items;

    CatalogNewItem newItem = null;

    protected override async Task OnInitializedAsync()
    {
        items = (await service.GetItemsAsync()).ToList();

        bus.Subscribe<CatalogDeleteEndEvent>(CatalogDeleteEndHandler);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (newItem is not null)
        {
            await bus.Publish<CatalogAddedEvent>(new(newItem));
            newItem = null;
        }
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogDeleteEndHandler);
    }

    async Task CatalogDeleteEndHandler(IComponentEvent @event)
    {
        var e = @event as CatalogDeleteEndEvent;

        if (e.Canceled)
            return;

        var item = items.Single(r => r.Id == e.Id);
        items.Remove(item);
        StateHasChanged();

        await bus.Publish(new CatalogRemovedEvent(e.Id));
    }

    void Add()
    {
        var id = items.Select(r => r.Id).Max() + 1;
        var item = new CatalogModel
        {
            Id = id,
            Name = $"Product #{id}",
            Category = CatalogCategoryEnum.TShirt,
            Color = "#FFFFFF",
            Description = "Lorem ipsum",
        };
        items.Add(item);
        newItem = new CatalogNewItem(item.Id, item.Name, item.Category.GetDescription(), item.Color, item.Description);
        StateHasChanged();
    }
}
