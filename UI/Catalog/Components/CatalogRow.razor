@inject ComponentEventBus bus
@inject JsHelper jsHelper
@implements IDisposable

<tr class="@cssRow" id="@rowId">
    @if (editVisible)
    {
        <CatalogItemEdit Item="@Item" />
    }
    else
    {
        <CatalogItemPreview Item="@Item" />
    }
</tr>

@if (deleteVisible)
{
    <CatalogDeleteConfirmRow Id="@Item.Id" Name="@Item.Name" />
}


@code {
    [Parameter] public CatalogModel Item { get; set; }

    bool editVisible = false;
    bool deleteVisible = false;
    string rowId => $"row{Item.Id}";

    string cssRow => editVisible
        ? "catalog-row__row--edit"
        : deleteVisible ? "catalog-row__row--delete" : "";

    protected override void OnInitialized()
    {
        bus.Subscribe<CatalogEditBeginEvent>(CatalogEditBeginHandler);
        bus.Subscribe<CatalogEditEndEvent>(CatalogEditEndHandler);
        bus.Subscribe<CatalogDeleteBeginEvent>(CatalogDeleteBeginHandler);
        bus.Subscribe<CatalogDeleteEndEvent>(CatalogDeleteEndHandler);
        bus.Subscribe<CatalogAddedEvent>(CatalogAddedHandler);
        bus.Subscribe<CatalogForSaleChangedEvent>(CatalogForSaleChangedHandler);
    }


    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogEditBeginHandler);
        bus.Unsubscribe(CatalogEditEndHandler);
        bus.Unsubscribe(CatalogDeleteBeginHandler);
        bus.Unsubscribe(CatalogDeleteEndHandler);
        bus.Unsubscribe(CatalogAddedHandler);
        bus.Unsubscribe(CatalogForSaleChangedHandler);
    }

    void CatalogEditBeginHandler(IComponentEvent @event)
    {
        var item = @event as CatalogEditBeginEvent;

        SetDeleteVisible(false);
        SetEditVisible(item.Id == Item.Id);
    }

    void CatalogEditEndHandler(IComponentEvent @event)
    {
        var item = @event as CatalogEditEndEvent;

        if (item.Id == Item.Id)
            SetEditVisible(false);
    }

    void CatalogDeleteBeginHandler(IComponentEvent @event)
    {
        var item = @event as CatalogDeleteBeginEvent;

        SetEditVisible(false);
        SetDeleteVisible(item.Id == Item.Id);
    }

    void CatalogDeleteEndHandler(IComponentEvent @event)
    {
        var item = @event as CatalogDeleteEndEvent;

        //if (item.Id == Item.Id)
        SetDeleteVisible(false);
    }

    async Task CatalogAddedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogAddedEvent;
        if (msg.Item.Id != Item.Id)
        {
            SetEditVisible(false);
            SetDeleteVisible(false);
            return;
        }

        SetEditVisible(true);
        await jsHelper.ScrollIntoView(rowId);
    }

    void CatalogForSaleChangedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogForSaleChangedEvent;

        if (msg.Id == Item.Id)
            Item.ForSale = msg.ForSale;
    }

    void SetEditVisible(bool visible)
    {
        var prev = editVisible;
        editVisible = visible;

        if (prev != editVisible)
            StateHasChanged();
    }

    void SetDeleteVisible(bool visible)
    {
        var prev = deleteVisible;
        deleteVisible = visible;

        if (prev != deleteVisible)
            StateHasChanged();
    }

}
