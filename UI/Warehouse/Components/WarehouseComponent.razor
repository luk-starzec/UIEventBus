@inject IWarehouseService service
@inject ComponentEventBus bus
@implements IDisposable

<div class="warehouse__wrapper">

    <h3>Warehouse</h3>

    @if (items is null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <div class="warehouse__table-wrapper">

            <table class="warehouse__table">

                <thead>
                    <WarehouseHeaderRow />
                </thead>

                <tbody>
                    @foreach (var item in items)
                    {
                        <WarehouseRow Item="@item" />
                    }
                </tbody>

            </table>

        </div>
    }

</div>


@code {
    List<WarehouseModel> items;

    protected override async Task OnInitializedAsync()
    {
        items = (await service.GetItemsAsync()).ToList();

        bus.Subscribe<CatalogRemovedEvent>(CatalogRemovedHandler);
        bus.Subscribe<CatalogAddedEvent>(CatalogAddedHandler);
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogRemovedHandler);
        bus.Unsubscribe(CatalogAddedHandler);
    }


    void CatalogRemovedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogRemovedEvent;

        var item = items.FirstOrDefault(r => r.Id == msg.Id);
        if (item is null)
            return;

        items.Remove(item);
        StateHasChanged();
    }


    void CatalogAddedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogAddedEvent;

        items.Add(new(msg.Item.Id, msg.Item.Name));
    }

}
