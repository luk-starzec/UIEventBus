@inject IWarehouseService service
@inject ComponentEventBus bus
@implements IDisposable

<div class="warehouse__wrapper">

    <h3>Warehouse</h3>

    @if (items is null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <table class="warehouse__table">

            <thead>
                <tr>
                    <th class="warehouse__item-header--id">
                        Id
                    </th>

                    <th>
                        Name
                    </th>

                    <th class="warehouse__item-header--quantity">
                        Quantity
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in items)
                {
                    <WarehouseRow Item="@item" />
                }
            </tbody>

        </table>
    }

</div>


@code {
    List<WarehouseModel> items;

    protected override async Task OnInitializedAsync()
    {
        items = (await service.GetItemsAsync()).ToList();

        bus.Subscribe<CatalogRemovedEvent>(CatalogRemovedHandler);
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogRemovedHandler);
    }


    void CatalogRemovedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogRemovedEvent;

        var item = items.FirstOrDefault(r => r.Id == msg.Id);
        if (item is null)
            return;

        items.Remove(item);
        StateHasChanged();
    }
}
