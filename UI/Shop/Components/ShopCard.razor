@inject ComponentEventBus bus
@implements IDisposable

<div class="shop-card__wrapper">

    <div class="shop-card__image">
        <ShopItemImage Category="@Item.Category" Color="@Item.Color" />
    </div>

    <div class="shop-card__id">
        #@Item.Id
    </div>

    <div class="shop-card__info" title="@Item.Description">
        <div>
            i
        </div>
    </div>

    <div class="shop-card__name">
        @Item.Name
    </div>

    <div class="shop-card__category">
        @Item.Category
    </div>


    <div class="shop-card__price">
        $@Item.Price
    </div>

    <button class="shop-card__buy" disabled="@(!Item.Available)" @onclick="Buy">Buy</button>

</div>

@code {
    [Parameter] public ShopModel Item { get; set; }

    protected override void OnInitialized()
    {
        bus.Subscribe<CatalogChangedEvent>(CatalogChangedHandler);
        bus.Subscribe<CatalogForSaleChangedEvent>(CatalogForSaleChangedHandler);
        bus.Subscribe<WarehouseQuantityChangedEvent>(WarehouseQuantityChangedHandler);

    }
    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogChangedHandler);
        bus.Unsubscribe(CatalogForSaleChangedHandler);
        bus.Unsubscribe(WarehouseQuantityChangedHandler);
    }

    async Task Buy() => await bus.Publish<ShopSoldEvent>(new ShopSoldEvent(Item.Id));

    void CatalogChangedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogChangedEvent;

        if (msg.Id != Item.Id)
            return;

        Item.Name = msg.Name;
        Item.Category = msg.Category;
        Item.Color = msg.Color;
        Item.Description = msg.Description;

        StateHasChanged();
    }

    void CatalogForSaleChangedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogForSaleChangedEvent;
        if (msg.Id != Item.Id)
            return;

        Item.ForSale = msg.ForSale;
        StateHasChanged();
    }

    void WarehouseQuantityChangedHandler(IComponentEvent @event)
    {
        var msg = @event as WarehouseQuantityChangedEvent;
        if (msg.Id != Item.Id)
            return;

        Item.Quantity = msg.Quantity;
        StateHasChanged();
    }

}
