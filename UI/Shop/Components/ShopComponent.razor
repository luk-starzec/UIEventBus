@inject ComponentEventBus bus
@inject IShopService service
@implements IDisposable

<div class="shop__wrapper">

    <h3>Shop</h3>

    @if (items is null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <ul class="shop__items-list">

            @foreach (var item in items)
            {
                <li>
                    <ShopCard Item="@item" />
                </li>
            }
        </ul>
    }
</div>

@code {
    List<ShopModel> items;

    Random rnd;
    protected override async Task OnInitializedAsync()
    {
        rnd = new Random();

        items = (await service.GetItemsAsync()).ToList();

        bus.Subscribe<CatalogAddedEvent>(CatalogAddedHandler);
        bus.Subscribe<CatalogRemovedEvent>(CatalogRemovedHandler);
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogAddedHandler);
        bus.Unsubscribe(CatalogRemovedHandler);
    }

    void CatalogRemovedHandler(IComponentEvent @event)
    {
        var deleted = @event as CatalogRemovedEvent;

        var item = items.FirstOrDefault(r => r.Id == deleted.Id);
        if (item is null)
            return;

        items.Remove(item);
        StateHasChanged();
    }

    void CatalogAddedHandler(IComponentEvent @event)
    {
        var msg = @event as CatalogAddedEvent;

        var item = new ShopModel
        {
            Id = msg.Item.Id,
            Name = msg.Item.Name,
            Category = msg.Item.Category,
            Color = msg.Item.Color,
            Description = msg.Item.Description,
            Price = rnd.Next(5, 40)
        };
        items.Add(item);
        StateHasChanged();
    }
}
