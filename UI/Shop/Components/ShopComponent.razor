@inject ComponentEventBus bus
@inject IShopService service
@implements IDisposable

<div class="shop__wrapper">

    <h3>Shop</h3>

    @if (items is null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <ul class="shop__items-list">

            @foreach (var item in items)
            {
                <li>
                    <ShopCard Item="@item" />
                </li>
            }
        </ul>
    }
</div>

@code {
    List<ShopModel> items;

    protected override async Task OnInitializedAsync()
    {
        items = (await service.GetItemsAsync()).ToList();

        bus.Subscribe<CatalogForSaleChangedEvent>(CatalogForSaleChangedHandler);
        bus.Subscribe<WarehouseQuantityChangedEvent>(WarehouseQuantityChangedHandler);
        bus.Subscribe<CatalogAddedEvent>(CatalogAddedHandler);
        bus.Subscribe<CatalogRemovedEvent>(CatalogRemovedHandler);
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(CatalogForSaleChangedHandler);
        bus.Unsubscribe(WarehouseQuantityChangedHandler);
        bus.Unsubscribe(CatalogAddedHandler);
        bus.Unsubscribe(CatalogRemovedHandler);
    }

    void CatalogForSaleChangedHandler(IComponentEvent @event)
    {
        var item = @event as CatalogForSaleChangedEvent;

        SetForSale(item.Id, item.ForSale);
    }

    void WarehouseQuantityChangedHandler(IComponentEvent @event)
    {
        var item = @event as WarehouseQuantityChangedEvent;

        SetQuantity(item.Id, item.Quantity);
    }

    void CatalogRemovedHandler(IComponentEvent @event)
    {
        var deleted = @event as CatalogRemovedEvent;

        var item = items.FirstOrDefault(r => r.Id == deleted.Id);
        if (item is null)
            return;

        items.Remove(item);
        StateHasChanged();
    }

    void CatalogAddedHandler(IComponentEvent @event)
    {
        var item = @event as CatalogAddedEvent;

    }

    void SetForSale(int id, bool forSale)
    {
        var item = items.FirstOrDefault(r => r.Id == id);
        if (item is null)
            return;

        item.ForSale = forSale;
        StateHasChanged();
    }

    void SetQuantity(int id, int quantity)
    {
        var item = items.FirstOrDefault(r => r.Id == id);
        if (item is null)
            return;

        item.Quantity = quantity;
        StateHasChanged();
    }
}
