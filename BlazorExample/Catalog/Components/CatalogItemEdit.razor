@inject ComponentEventBus bus

<td class="catalog-item__cell--id">
    @Item.Id
</td>

<td>
    <input @bind-value="name" />
</td>

<td>
    <select @bind="categoryId">
        @foreach (var category in categories)
        {
            <option value="@category.Key">@category.Value</option>
        }
    </select>
</td>

<td class="catalog-item__cell--color">
    <input type="color" @bind="@color" title="Select color" />
</td>

<td>
    <input @bind-value="description" />
</td>

<td>

    <div class="catalog-item__options-wrapper">

        <button class="catalog-item-options__button catalog-item-options__button--active" @onclick="Confirm" title="Save changes">
            <span class="oi oi-check"></span>
        </button>

        <button class="catalog-item-options__button" @onclick="Cancel" title="Cancel">
            <span class="oi oi-x"></span>
        </button>

    </div>

</td>

@code {
    [Parameter] public CatalogModel Item { get; set; }

    Dictionary<int, string> categories;

    string name;
    int categoryId;
    string color;
    string description;

    protected override void OnInitialized()
    {
        categories = Enum.GetValues(typeof(CatalogCategoryEnum))
            .Cast<CatalogCategoryEnum>()
            .ToDictionary(k => (int)k, v => v.GetDescription());
    }

    protected override void OnParametersSet()
    {
        name = Item.Name;
        description = Item.Description;
        categoryId = (int)Item.Category;
        color = Item.Color;
    }

    async Task Confirm()
    {
        Item.Name = name;
        Item.Category = (CatalogCategoryEnum)categoryId;
        Item.Color = color;
        Item.Description = description;

        await bus.Publish(new CatalogEditEndEvent(Item.Id, false));
    }

    async Task Cancel() => await bus.Publish(new CatalogEditEndEvent(Item.Id, true));

}
