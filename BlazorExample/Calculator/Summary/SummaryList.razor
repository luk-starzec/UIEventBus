@inject ComponentEventBus bus
@implements IDisposable

<div class="summary-list__wrapper">

    <div class="summary-list__list-wrapper">
        <table>

            <thead>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in inputItems)
                {
                    <SummaryRowInput Item="@item" />
                }
                @foreach (var item in resultItems)
                {
                    <SummaryRowResult Item="@item" />
                }
            </tbody>

        </table>
    </div>

    <div class="result-list__add-wrapper">
        <ResultAdd />
    </div>

    <button class="result-list__reset-style">
        Reset styles
    </button>

</div>

@code {
    List<SummaryInputModel> inputItems = new List<SummaryInputModel>();
    List<SummaryResultModel> resultItems = new List<SummaryResultModel>();

    protected override void OnInitialized()
    {
        bus.Subscribe<InputAddEvent>(InputAddHandler);
        bus.Subscribe<InputRemoveEvent>(InputRemoveHandler);
        bus.Subscribe<ResultAddEvent>(ResultAddHandler);
        bus.Subscribe<ResultRemoveEvent>(ResultRemoveHandler);
    }
    void IDisposable.Dispose()
    {
        bus.Unsubscribe(InputAddHandler);
        bus.Unsubscribe(InputRemoveHandler);
        bus.Unsubscribe(ResultAddHandler);
        bus.Unsubscribe(ResultRemoveHandler);
    }

    void InputAddHandler(IComponentEvent @event)
    {
        var msg = @event as InputAddEvent;
        inputItems.Add(new()
        {
            Id = msg.Id,
            Name = msg.Name,
        });
        StateHasChanged();
    }

    void InputRemoveHandler(IComponentEvent @event)
    {
        var msg = @event as InputRemoveEvent;

        var item = inputItems.FirstOrDefault(r => r.Id == msg.Id);
        if (item is null)
            return;

        inputItems.Remove(item);
        StateHasChanged();
    }

    void ResultAddHandler(IComponentEvent @event)
    {
        var msg = @event as ResultAddEvent;

        resultItems.Add(new()
        {
            Id = msg.Id,
            Operator = msg.Operator,
            Inputs = msg.Parameters.ToDictionary(k => k.Id, v => v.Name),
            Values = msg.Parameters.ToDictionary(k => k.Id, v => v.Value),
            Result = msg.Result,
        });
        StateHasChanged();
    }

    void ResultRemoveHandler(IComponentEvent @event)
    {
        var msg = @event as ResultRemoveEvent;

        var item = resultItems.FirstOrDefault(r => r.Id == msg.Id);
        if (item is null)
            return;

        resultItems.Remove(item);
        StateHasChanged();
    }

}
