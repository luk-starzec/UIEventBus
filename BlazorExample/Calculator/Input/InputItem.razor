@inject ComponentEventBus bus
@implements IDisposable

<div class="input-item__wrapper" style="background-color: @color">
    <label>
        @Model.Name:
        <input type="number" value="@Model.Value" @onchange="OnChange" />
    </label>

    <button @onclick="OnRemove">
        <span class="oi oi-x"></span>
    </button>
</div>

@code {
    [Parameter] public InputModel Model { get; set; }

    string color;
    string defaultColor = "#FFFFAA";

    protected override void OnInitialized()
    {
        color = defaultColor;

        bus.Subscribe<InputStyleResetEvent>(InputStyleResetHandler);
        bus.Subscribe<SummaryStyleChangeEvent>(SummaryStyleChangedHandler);
    }

    void IDisposable.Dispose()
    {
        bus.Unsubscribe(InputStyleResetHandler);
        bus.Unsubscribe(SummaryStyleChangedHandler);
    }

    async Task InputStyleResetHandler(IComponentEvent @event)
    {
        var msg = @event as InputStyleResetEvent;
        if (msg.Id != Model.Id)
            return;

        color = defaultColor;
        await bus.Publish(new InputStyleChangeEvent(Model.Id, color));
        StateHasChanged();
    }

    void SummaryStyleChangedHandler(IComponentEvent @event)
    {
        var msg = @event as SummaryStyleChangeEvent;
        if (!msg.IsInput || msg.Id != Model.Id)
            return;

        color = msg.Color;
        StateHasChanged();
    }

    async Task OnChange(ChangeEventArgs e)
    {
        Model.Value = int.Parse(e.Value?.ToString());
        await bus.Publish(new InputValueChangeEvent(Model.Id, Model.Value));
    }

    async Task OnRemove()
    {
        await bus.Publish(new InputRemoveEvent(Model.Id));
    }
}
